(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2],{70428:(e,n,o)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/projects/new/[template]",function(){return o(75877)}])},75877:(e,n,o)=>{"use strict";o.r(n),o.d(n,{__N_SSG:()=>X,default:()=>M});var s=o(74848),t=o(36277),a=o(13368),r=o.n(a),i=o(96540),p=o(67586),l=o(98235),d=o(35188),c=o(1399),u=o.n(c);const m=JSON.parse('{"q3":{"i":"//! Template project for Rust on ESP32 (`no_std`) based on [`esp-hal`](https://github.com/esp-rs/esp-hal)\\n//!\\n//! Useful resources:\\n//! - [The Rust on ESP Book](https://docs.esp-rs.org/book/)\\n//! - [Embedded Rust (no_std) on Espressif](https://docs.esp-rs.org/no_std-training/)\\n//! - [Matrix channel](https://matrix.to/#/#esp-rs:matrix.org)\\n\\n#![no_std]\\n#![no_main]\\n\\nuse esp_backtrace as _;\\nuse esp_hal::{clock::CpuClock, delay::Delay, main};\\nuse log::info;\\n\\n#[main]\\nfn main() -> ! {\\n    let config = esp_hal::Config::default().with_cpu_clock(CpuClock::max());\\n    let _peripherals = esp_hal::init(config);\\n\\n    let delay = Delay::new();\\n\\n    esp_println::logger::init_logger_from_env();\\n\\n    loop {\\n        info!(\\"Hello world!\\");\\n        delay.delay_millis(500);\\n    }\\n}\\n","Z":"[package]\\nname = \\"rust_project_esp32\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nlicense = \\"MIT OR Apache-2.0\\"\\n\\n[dependencies]\\nesp-hal = { version = \\"0.23.1\\", features = [\\"esp32\\"] }\\nesp-backtrace = { version = \\"0.15.0\\", features = [\\n    \\"esp32\\",\\n    \\"panic-handler\\",\\n    \\"println\\",\\n] }\\nesp-println = { version = \\"0.13.0\\", features = [\\"esp32\\", \\"log\\"] }\\nlog = { version = \\"0.4.22\\" }\\n\\n"},"lx":{"i":"//! Template project for Rust on ESP32-C3 (`no_std`) based on [`esp-hal`](https://github.com/esp-rs/esp-hal)\\n//!\\n//! Useful resources:\\n//! - [The Rust on ESP Book](https://docs.esp-rs.org/book/)\\n//! - [Embedded Rust (no_std) on Espressif](https://docs.esp-rs.org/no_std-training/)\\n//! - [Matrix channel](https://matrix.to/#/#esp-rs:matrix.org)\\n\\n#![no_std]\\n#![no_main]\\n\\nuse esp_backtrace as _;\\nuse esp_hal::{clock::CpuClock, delay::Delay, main};\\nuse log::info;\\n\\n#[main]\\nfn main() -> ! {\\n    let config = esp_hal::Config::default().with_cpu_clock(CpuClock::max());\\n    let _peripherals = esp_hal::init(config);\\n\\n    let delay = Delay::new();\\n\\n    esp_println::logger::init_logger_from_env();\\n\\n    loop {\\n        info!(\\"Hello world!\\");\\n        delay.delay_millis(500);\\n    }\\n}\\n\\n","Z":"[package]\\nname = \\"rust_project_esp32c3\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nlicense = \\"MIT OR Apache-2.0\\"\\n\\n[dependencies]\\nesp-hal = { version = \\"0.23.1\\", features = [\\"esp32c3\\"] }\\nesp-backtrace = { version = \\"0.15.0\\", features = [\\n    \\"esp32c3\\",\\n    \\"panic-handler\\",\\n    \\"println\\",\\n] }\\nesp-println = { version = \\"0.13.0\\", features = [\\"esp32c3\\", \\"log\\"] }\\nlog = { version = \\"0.4.22\\" }\\n"},"uM":{"i":"//! Template project for Rust on ESP32-C6 (`no_std`) based on [`esp-hal`](https://github.com/esp-rs/esp-hal)\\n//!\\n//! Useful resources:\\n//! - [The Rust on ESP Book](https://docs.esp-rs.org/book/)\\n//! - [Embedded Rust (no_std) on Espressif](https://docs.esp-rs.org/no_std-training/)\\n//! - [Matrix channel](https://matrix.to/#/#esp-rs:matrix.org)\\n\\n#![no_std]\\n#![no_main]\\n\\nuse esp_backtrace as _;\\nuse esp_hal::{clock::CpuClock, delay::Delay, main};\\nuse log::info;\\n\\n#[main]\\nfn main() -> ! {\\n    let config = esp_hal::Config::default().with_cpu_clock(CpuClock::max());\\n    let _peripherals = esp_hal::init(config);\\n\\n    let delay = Delay::new();\\n\\n    esp_println::logger::init_logger_from_env();\\n\\n    loop {\\n        info!(\\"Hello world!\\");\\n        delay.delay_millis(500);\\n    }\\n}\\n","Z":"[package]\\nname = \\"rust_project_esp32c6\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nlicense = \\"MIT OR Apache-2.0\\"\\n\\n[dependencies]\\nesp-hal = { version = \\"0.23.1\\", features = [\\"esp32c6\\"] }\\nesp-backtrace = { version = \\"0.15.0\\", features = [\\n    \\"esp32c6\\",\\n    \\"panic-handler\\",\\n    \\"println\\",\\n] }\\nesp-println = { version = \\"0.13.0\\", features = [\\"esp32c6\\", \\"log\\"] }\\nlog = { version = \\"0.4.22\\" }\\n"},"jy":{"i":"//! Template project for Rust on ESP32-H2 (`no_std`) based on [`esp-hal`](https://github.com/esp-rs/esp-hal)\\n//!\\n//! Useful resources:\\n//! - [The Rust on ESP Book](https://docs.esp-rs.org/book/)\\n//! - [Embedded Rust (no_std) on Espressif](https://docs.esp-rs.org/no_std-training/)\\n//! - [Matrix channel](https://matrix.to/#/#esp-rs:matrix.org)\\n\\n#![no_std]\\n#![no_main]\\n\\nuse esp_backtrace as _;\\nuse esp_hal::{clock::CpuClock, delay::Delay, main};\\nuse log::info;\\n\\n#[main]\\nfn main() -> ! {\\n    let config = esp_hal::Config::default().with_cpu_clock(CpuClock::max());\\n    let _peripherals = esp_hal::init(config);\\n\\n    let delay = Delay::new();\\n\\n    esp_println::logger::init_logger_from_env();\\n\\n    loop {\\n        info!(\\"Hello world!\\");\\n        delay.delay_millis(500);\\n    }\\n}\\n\\n","Z":"[package]\\nname = \\"rust_project_esp32h2\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nlicense = \\"MIT OR Apache-2.0\\"\\n\\n[dependencies]\\nesp-hal = { version = \\"0.23.1\\", features = [\\"esp32h2\\"] }\\nesp-backtrace = { version = \\"0.15.0\\", features = [\\n    \\"esp32h2\\",\\n    \\"panic-handler\\",\\n    \\"println\\",\\n] }\\nesp-println = { version = \\"0.13.0\\", features = [\\"esp32h2\\", \\"log\\"] }\\nlog = { version = \\"0.4.22\\" }\\n"},"iM":{"i":"//! Template project for Rust on ESP32-S2 (`no_std`) based on [`esp-hal`](https://github.com/esp-rs/esp-hal)\\n//!\\n//! Useful resources:\\n//! - [The Rust on ESP Book](https://docs.esp-rs.org/book/)\\n//! - [Embedded Rust (no_std) on Espressif](https://docs.esp-rs.org/no_std-training/)\\n//! - [Matrix channel](https://matrix.to/#/#esp-rs:matrix.org)\\n\\n#![no_std]\\n#![no_main]\\n\\nuse esp_backtrace as _;\\nuse esp_hal::{clock::CpuClock, delay::Delay, main};\\nuse log::info;\\n\\n#[main]\\nfn main() -> ! {\\n    let config = esp_hal::Config::default().with_cpu_clock(CpuClock::max());\\n    let _peripherals = esp_hal::init(config);\\n\\n    let delay = Delay::new();\\n\\n    esp_println::logger::init_logger_from_env();\\n\\n    loop {\\n        info!(\\"Hello world!\\");\\n        delay.delay_millis(500);\\n    }\\n}\\n\\n","Z":"[package]\\nname = \\"rust_project_esp32s2\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nlicense = \\"MIT OR Apache-2.0\\"\\n\\n[dependencies]\\nesp-hal = { version = \\"0.23.1\\", features = [\\"esp32s2\\"] }\\nesp-backtrace = { version = \\"0.15.0\\", features = [\\n    \\"esp32s2\\",\\n    \\"panic-handler\\",\\n    \\"println\\",\\n] }\\nesp-println = { version = \\"0.13.0\\", features = [\\"esp32s2\\", \\"log\\"] }\\nlog = { version = \\"0.4.22\\" }\\n"},"p5":{"i":"//! Template project for Rust on ESP32-S3 (`no_std`) based on [`esp-hal`](https://github.com/esp-rs/esp-hal)\\n//!\\n//! Useful resources:\\n//! - [The Rust on ESP Book](https://docs.esp-rs.org/book/)\\n//! - [Embedded Rust (no_std) on Espressif](https://docs.esp-rs.org/no_std-training/)\\n//! - [Matrix channel](https://matrix.to/#/#esp-rs:matrix.org)\\n\\n#![no_std]\\n#![no_main]\\n\\nuse esp_backtrace as _;\\nuse esp_hal::{clock::CpuClock, delay::Delay, main};\\nuse log::info;\\n\\n#[main]\\nfn main() -> ! {\\n    let config = esp_hal::Config::default().with_cpu_clock(CpuClock::max());\\n    let _peripherals = esp_hal::init(config);\\n\\n    let delay = Delay::new();\\n\\n    esp_println::logger::init_logger_from_env();\\n\\n    loop {\\n        info!(\\"Hello world!\\");\\n        delay.delay_millis(500);\\n    }\\n}\\n\\n","Z":"[package]\\nname = \\"rust_project_esp32s3\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nlicense = \\"MIT OR Apache-2.0\\"\\n\\n[dependencies]\\nesp-hal = { version = \\"0.23.1\\", features = [\\"esp32s3\\"] }\\nesp-backtrace = { version = \\"0.15.0\\", features = [\\n    \\"esp32s3\\",\\n    \\"panic-handler\\",\\n    \\"println\\",\\n] }\\nesp-println = { version = \\"0.13.0\\", features = [\\"esp32s3\\", \\"log\\"] }\\nlog = { version = \\"0.4.22\\" }\\n"},"yf":{"i":"//! Template project for Rust on ESP32-C3 (`no_std`) based on [`esp-hal`](https://github.com/esp-rs/esp-hal)\\n//!\\n//! Useful resources:\\n//! - [The Rust on ESP Book](https://docs.esp-rs.org/book/)\\n//! - [Embedded Rust (no_std) on Espressif](https://docs.esp-rs.org/no_std-training/)\\n//! - [Matrix channel](https://matrix.to/#/#esp-rs:matrix.org)\\n\\n#![no_std]\\n#![no_main]\\n\\nuse esp_backtrace as _;\\nuse esp_hal::{clock::CpuClock, delay::Delay, main};\\nuse log::info;\\n\\n#[main]\\nfn main() -> ! {\\n    let config = esp_hal::Config::default().with_cpu_clock(CpuClock::max());\\n    let _peripherals = esp_hal::init(config);\\n\\n    let delay = Delay::new();\\n\\n    esp_println::logger::init_logger_from_env();\\n\\n    loop {\\n        info!(\\"Hello world!\\");\\n        delay.delay_millis(500);\\n    }\\n}\\n\\n","Z":"[package]\\nname = \\"rust_project_esp32c3\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nlicense = \\"MIT OR Apache-2.0\\"\\n\\n[dependencies]\\nesp-hal = { version = \\"0.23.1\\", features = [\\"esp32c3\\"] }\\nesp-backtrace = { version = \\"0.15.0\\", features = [\\n    \\"esp32c3\\",\\n    \\"panic-handler\\",\\n    \\"println\\",\\n] }\\nesp-println = { version = \\"0.13.0\\", features = [\\"esp32c3\\", \\"log\\"] }\\nlog = { version = \\"0.4.22\\" }\\n"}}'),h="Anonymous maker",b="void setup() {\n  // put your setup code here, to run once:\n\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n\n}\n",k='void setup() {\n  // put your setup code here, to run once:\n  Serial.begin(115200);\n  Serial.println("Hello, ESP32!");\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  delay(10); // this speeds up the simulation\n}\n',g='void setup() {\n  // put your setup code here, to run once:\n  Serial.begin(115200);\n  Serial.println("Hello, STM32!");\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  delay(10); // this speeds up the simulation\n}\n',f='void setup() {\n  // put your setup code here, to run once:\n  Serial1.begin(115200);\n  Serial1.println("Hello, Raspberry Pi Pico!");\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  delay(1); // this speeds up the simulation\n}\n',_='#include <stdio.h>\n#include "freertos/FreeRTOS.h"\n#include "freertos/task.h"\n\nvoid app_main() {\n  printf("Hello, Wokwi!\\n");\n  while (true) {\n    vTaskDelay(1000 / portTICK_PERIOD_MS);\n  }\n}\n',y={blank:{name:"Blank Diagram",readme:["# Blank project","","This is a blank Wokwi project. Please edit this README file and add a description of your project.","","## Usage","",'1. Add parts by clicking the blue "+" button in the diagram editor',"2. Connect parts by dragging wires between them","3. Click the green play button to start the simulation",""].join("\n")},"arduino-uno":{name:"Arduino Uno",boardName:"wokwi-arduino-uno",boardId:"uno",sketch:b},"arduino-mega":{name:"Arduino Mega",boardName:"wokwi-arduino-mega",boardId:"mega",sketch:b},"arduino-nano":{name:"Arduino Nano",boardName:"wokwi-arduino-nano",boardId:"nano",sketch:b},attiny85:{name:"ATtiny85",boardName:"wokwi-attiny85",boardId:"tiny",sketch:b},esp32:{name:"ESP32",boardName:"board-esp32-devkit-c-v4",boardId:"esp",sketch:k,defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]]},"esp32-s2":{name:"ESP32-S2",boardName:"board-esp32-s2-devkitm-1",boardId:"esp",sketch:k.replace("ESP32","ESP32-S2"),defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]]},"esp32-s3":{name:"ESP32-S3",boardName:"board-esp32-s3-devkitc-1",boardId:"esp",sketch:k.replace("ESP32","ESP32-S3"),defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]]},"esp32-c3":{name:"ESP32-C3",boardName:"board-esp32-c3-devkitm-1",boardId:"esp",sketch:k.replace("ESP32","ESP32-C3"),defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]]},"esp32-c6":{name:"ESP32-C6",boardName:"board-esp32-c6-devkitc-1",boardId:"esp",sketch:k.replace("ESP32","ESP32-C6"),defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]]},"esp32-h2":{name:"ESP32-H2",boardName:"board-esp32-h2-devkitm-1",boardId:"esp",sketch:k.replace("ESP32","ESP32-H2"),defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]]},"esp32-p4":{name:"ESP32-P4",boardName:"board-esp32-p4-function-ev",boardId:"esp",sketch:k.replace("ESP32","ESP32-P4"),defaultConnections:[["esp:37","$serialMonitor:RX",""],["esp:38","$serialMonitor:TX",""]]},"micropython-esp32":{name:"MicroPython on ESP32",boardName:"board-esp32-devkit-c-v4",boardId:"esp",boardAttrs:{env:"micropython-20231227-v1.22.0"},sketchName:"main.py",sketch:'print("Hello, ESP32!")\n',defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]]},"micropython-esp32-c3":{name:"MicroPython on ESP32-C3",boardName:"board-esp32-c3-devkitm-1",boardId:"esp",boardAttrs:{env:"micropython-20231227-v1.22.0"},sketchName:"main.py",sketch:'print("Hello, ESP32-C3!")\n',defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]]},"micropython-esp32-s3":{name:"MicroPython on ESP32-S3",boardName:"board-esp32-s3-devkitc-1",boardId:"esp",boardAttrs:{env:"micropython-20231227-v1.22.0",flashSize:"8"},sketchName:"main.py",sketch:'print("Hello, ESP32-S3!")\n',defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]]},"pi-pico":{name:"Raspberry Pi Pico",boardName:"wokwi-pi-pico",boardId:"pico",sketch:f,defaultConnections:[["pico:GP0","$serialMonitor:RX",""],["pico:GP1","$serialMonitor:TX",""]]},"pi-pico-sdk":{name:"Raspberry Pi Pico (SDK)",boardName:"wokwi-pi-pico",boardId:"pico",sketchName:"main.c",sketch:'#include <stdio.h>\n#include "pico/stdlib.h"\n\nint main() {\n  stdio_init_all();\n  while (true) {\n    printf("Hello, Wokwi!\\n");\n    sleep_ms(250);\n  }\n}',boardAttrs:{builder:"pico-sdk"},defaultConnections:[["pico:GP0","$serialMonitor:RX",""],["pico:GP1","$serialMonitor:TX",""]]},"micropython-pi-pico":{name:"MicroPython on Raspberry Pi Pico",boardName:"wokwi-pi-pico",boardId:"pico",boardAttrs:{env:"micropython-20231227-v1.22.0"},sketchName:"main.py",sketch:'import time\ntime.sleep(0.1) # Wait for USB to become ready\n\nprint("Hello, Pi Pico!")\n',defaultConnections:[]},"circuitpython-pi-pico":{name:"CircuitPython on Raspberry Pi Pico",boardName:"wokwi-pi-pico",boardId:"pico",boardAttrs:{env:"circuitpython-8.0.2"},sketchName:"code.py",sketch:'print("Hello, Pi Pico!")\n',defaultConnections:[]},"pi-pico-w":{name:"Raspberry Pi Pico W",boardName:"board-pi-pico-w",boardId:"pico",sketch:f.replace("Pico!","Pico W!"),defaultConnections:[["pico:GP0","$serialMonitor:RX",""],["pico:GP1","$serialMonitor:TX",""]]},"pi-pico-w-sdk":{name:"Raspberry Pi Pico W (SDK)",boardName:"board-pi-pico-w",boardId:"pico",sketchName:"main.c",sketch:'#include <stdio.h>\n#include "pico/stdlib.h"\n#include "pico/cyw43_arch.h"\n\nint main() {\n  stdio_init_all();\n  while (true) {\n    printf("Hello, Wokwi!\\n");\n    sleep_ms(250);\n  }\n}',boardAttrs:{builder:"pico-sdk"},defaultConnections:[["pico:GP0","$serialMonitor:RX",""],["pico:GP1","$serialMonitor:TX",""]]},"micropython-pi-pico-w":{name:"MicroPython on Raspberry Pi Pico W",boardName:"board-pi-pico-w",boardId:"pico",boardAttrs:{env:"micropython-20231227-v1.22.0"},sketchName:"main.py",sketch:'import time\ntime.sleep(0.1) # Wait for USB to become ready\n\nprint("Hello, Pi Pico W!")\n',defaultConnections:[]},"st-nucleo-c031c6":{name:"STM32 Nucleo64 C031C6",boardName:"board-st-nucleo-c031c6",boardId:"nucleo",sketch:g,defaultConnections:[["$serialMonitor:TX","nucleo:PA3","",[]],["$serialMonitor:RX","nucleo:PA2","",[]]]},"st-nucleo-l031k6":{name:"STM32 Nucleo64 L031K6",boardName:"board-st-nucleo-l031k6",boardId:"nucleo",sketch:g,defaultConnections:[["$serialMonitor:TX","nucleo:VCP_RX","",[]],["$serialMonitor:RX","nucleo:VCP_TX","",[]]]},franzininho:{name:"Franzininho",boardName:"wokwi-franzininho",boardId:"franzininho",sketch:b},"franzininho-wifi":{name:"Franzininho WiFi (ESP32-S2)",boardName:"board-franzininho-wifi",boardId:"franzininho",sketch:b},"esp-idf-esp32":{name:"ESP-IDF on ESP32",boardName:"board-esp32-devkit-c-v4",boardId:"esp",boardAttrs:{builder:"esp-idf"},sketchName:"main.c",sketch:_,defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]]},"esp-idf-esp32-c3":{name:"ESP-IDF on ESP32-C3",boardName:"board-esp32-c3-devkitm-1",boardId:"esp",boardAttrs:{builder:"esp-idf"},sketchName:"main.c",sketch:_,defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]]},"esp-idf-esp32-c6":{name:"ESP-IDF on ESP32-C6",boardName:"board-esp32-c6-devkitc-1",boardId:"esp",boardAttrs:{builder:"esp-idf"},sketchName:"main.c",sketch:_,defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]]},"esp-idf-esp32-h2":{name:"ESP-IDF on ESP32-H2",boardName:"board-esp32-h2-devkitm-1",boardId:"esp",boardAttrs:{builder:"esp-idf"},sketchName:"main.c",sketch:_,defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]]},"esp-idf-esp32-p4":{name:"ESP-IDF on ESP32-P4",boardName:"board-esp32-p4-function-ev",boardId:"esp",boardAttrs:{builder:"esp-idf"},sketchName:"main.c",sketch:_,defaultConnections:[["esp:37","$serialMonitor:RX",""],["esp:38","$serialMonitor:TX",""]]},"esp-idf-esp32-s2":{name:"ESP-IDF on ESP32-S2",boardName:"board-esp32-s2-devkitm-1",boardId:"esp",boardAttrs:{builder:"esp-idf"},sketchName:"main.c",sketch:_,defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]]},"esp-idf-esp32-s3":{name:"ESP-IDF on ESP32-S3",boardName:"board-esp32-s3-devkitc-1",boardId:"esp",boardAttrs:{builder:"esp-idf"},sketchName:"main.c",sketch:_,defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]]},"rust-nostd-esp32":{name:"Rust on ESP32 (no_std)",boardName:"board-esp32-devkit-c-v4",boardId:"esp",sketch:m.q3.i,sketchName:"main.rs",boardAttrs:{builder:"rust-nostd-esp"},defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]],serialMonitor:{display:"terminal",convertEol:!0},extraFiles:[{name:"Cargo.toml",content:m.q3.Z}]},"rust-nostd-esp32-c3":{name:"Rust on ESP32-C3 (no_std)",boardName:"board-esp32-c3-devkitm-1",boardId:"esp",sketch:m.lx.i,sketchName:"main.rs",boardAttrs:{builder:"rust-nostd-esp"},defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]],serialMonitor:{display:"terminal",convertEol:!0},extraFiles:[{name:"Cargo.toml",content:m.lx.Z}]},"rust-nostd-esp32-c6":{name:"Rust on ESP32-C6 (no_std)",boardName:"board-esp32-c6-devkitc-1",boardId:"esp",sketch:m.uM.i,sketchName:"main.rs",boardAttrs:{builder:"rust-nostd-esp"},defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]],serialMonitor:{display:"terminal",convertEol:!0},extraFiles:[{name:"Cargo.toml",content:m.uM.Z}]},"rust-nostd-esp32-h2":{name:"Rust on ESP32-H2 (no_std)",boardName:"board-esp32-h2-devkitm-1",boardId:"esp",sketch:m.jy.i,sketchName:"main.rs",boardAttrs:{builder:"rust-nostd-esp"},defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]],serialMonitor:{display:"terminal",convertEol:!0},extraFiles:[{name:"Cargo.toml",content:m.jy.Z}]},"rust-nostd-esp32-s2":{name:"Rust on ESP32-S2 (no_std)",boardName:"board-esp32-s2-devkitm-1",boardId:"esp",sketch:m.iM.i,sketchName:"main.rs",boardAttrs:{builder:"rust-nostd-esp"},defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]],serialMonitor:{display:"terminal",convertEol:!0},extraFiles:[{name:"Cargo.toml",content:m.iM.Z}]},"rust-nostd-esp32-s3":{name:"Rust on ESP32-S3 (no_std)",boardName:"board-esp32-s3-devkitc-1",boardId:"esp",sketch:m.p5.i,sketchName:"main.rs",boardAttrs:{builder:"rust-nostd-esp"},defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]],serialMonitor:{display:"terminal",convertEol:!0},extraFiles:[{name:"Cargo.toml",content:m.p5.Z}]},"rust-nostd-esp32-rust-board":{name:"Rust on ESP32 Rust Board (no_std)",boardName:"board-esp32-c3-rust-1",boardId:"esp",sketch:m.yf.i,sketchName:"main.rs",boardAttrs:{builder:"rust-nostd-esp"},defaultConnections:[["esp:21","$serialMonitor:RX",""],["esp:20","$serialMonitor:TX",""]],serialMonitor:{display:"terminal",convertEol:!0},extraFiles:[{name:"Cargo.toml",content:m.yf.Z}]}};function P(e){let{boardName:n,boardId:o,boardAttrs:s,defaultConnections:t,serialMonitor:a}=e;const r={version:1,author:h,editor:"wokwi",parts:o&&n?[{id:o,type:n,attrs:s}]:[],connections:null!=t?t:[],serialMonitor:a};return u()(r,null,2,100)}function v(e){var n;const o=[{name:"diagram.json",content:P(e)},...null!==(n=e.extraFiles)&&void 0!==n?n:[]];var s;e.sketch&&o.unshift({name:null!==(s=e.sketchName)&&void 0!==s?s:"sketch.ino",content:e.sketch});return e.readme&&o.unshift({name:"README.md",content:e.readme}),o}var X=!0;const M=(0,t.PA)((e=>{let{templateName:n}=e;const o=y[null!=n?n:""]||y["arduino-uno"],t=(0,l.A)(),a=(0,i.useMemo)((()=>d.MM.create({files:v(o)})),[o]),{displayName:c}=t;(0,i.useEffect)((()=>{const{diagram:e}=a;c&&e&&e.author===h&&(e.undoManager.withoutUndo((()=>{e.setAuthor(c)})),a.syncDiagram())}),[a,a.diagram,c]);const u="New ".concat(o.name," Project - Wokwi Simulator"),m="Create a new ".concat(o.name," simulation project, run it in your browser and share your code and schematics.");return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r(),{children:[(0,s.jsx)("title",{children:u}),(0,s.jsx)("meta",{name:"description",content:m}),(0,s.jsx)("meta",{property:"og:title",content:u}),(0,s.jsx)("meta",{property:"og:description",content:m}),(0,s.jsx)("meta",{property:"og:image",content:"https://thumbs.wokwi.com/api/render.png?service=wokwi&path=/projects/new/".concat(n)}),(0,s.jsx)("meta",{property:"og:image:type",content:"image/png"}),(0,s.jsx)("meta",{property:"og:image:width",content:"1200"}),(0,s.jsx)("meta",{property:"og:image:height",content:"630"})]}),(0,s.jsx)(p.z,{project:a})]})}))}},e=>{e.O(0,[6929,7197,5111,3522,6010,6372,7840,9780,3995,3408,5188,1296,5770,153,636,6593,8792],(()=>{return n=70428,e(e.s=n);var n}));var n=e.O();_N_E=n}]);